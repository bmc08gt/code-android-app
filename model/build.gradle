import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java-library'
    id 'com.google.protobuf'
    id 'maven-publish'
}

def archSuffix = Os.isFamily(Os.FAMILY_MAC) ? ':osx-x86_64' : ''

version = '0.0.1'
group = 'com.codeinc.gen'

def grpcVersion = "1.49.0"
def protocVersion = "3.12.0"
dependencies {
    implementation "io.grpc:grpc-protobuf-lite:$grpcVersion" // "io.grpc:grpc-protobuf-lite:${grpcVersion}"
    implementation "io.grpc:grpc-stub:$grpcVersion"
//    protobuf("io.envoyproxy.protoc-gen-validate:pgv-java-stub:${validateVersion}") {
//        exclude group: "com.google.protobuf", module: "protobuf-java"
//        exclude group: "com.google.protobuf", module: "protobuf-java-util"
//    }

    // Kotlin Generation
    implementation "io.grpc:grpc-kotlin-stub-lite:1.0.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

}

def generatedSrcRoot = file("${layout.buildDirectory}/generated/source/proto/main/java")
def generatedSrcRoot2 = file("${layout.buildDirectory}/generated/source/proto/main/grpc")
def generatedSrcRoot3 = file("${layout.buildDirectory}/generated/source/proto/main/grpcKt")
sourceSets.main {
    proto {
        srcDir "${rootDir}/model/proto"
    }
    java {
        srcDirs = ["$generatedSrcRoot", "$generatedSrcRoot2", "$generatedSrcRoot3"]
    }
}

compileJava {
    options.generatedSourceOutputDirectory.set(generatedSrcRoot)
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}$archSuffix"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
//        javapgv {
//            artifact = "io.envoyproxy.protoc-gen-validate:protoc-gen-validate:${validateVersion}"
//        }
        grpcKt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:1.0.0:jdk7@jar"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
        all()*.plugins {
            grpc {
                option 'lite'
            }
            grpcKt {
                option 'lite'
            }
        }
    }
}

jar {
    manifest {
        attributes('code-api': project.name,
                'Version': project.version)
    }

    exclude "**/*agora*/**"
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
    from generatedSrcRoot, generatedSrcRoot2, generatedSrcRoot3
    exclude "**/*agora*/**"
}

artifacts {
    archives sourcesJar
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}